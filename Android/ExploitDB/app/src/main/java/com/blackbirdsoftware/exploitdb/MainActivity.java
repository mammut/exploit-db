package com.blackbirdsoftware.exploitdb;
import com.blackbirdsoftware.exploitdb.R;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;

import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;

import android.util.Log;
import android.view.LayoutInflater;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Toast;


import com.blackbirdsoftware.exploitdb.activities.BaseActivity;
import com.blackbirdsoftware.exploitdb.activities.ExploitProfileActivity;
import com.blackbirdsoftware.exploitdb.model.Exploit;


import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;


import java.io.IOException;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.security.AccessController;
import java.util.List;

public class MainActivity extends BaseActivity {

//     Used to load the 'native-lib' library on application startup.
    static {
        System.loadLibrary("native-lib");
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        LayoutInflater inflater = getLayoutInflater();
        LinearLayout contentFrame = (LinearLayout) findViewById(R.id.content);
        inflater.inflate(R.layout.home_layout, contentFrame);


        try {
            URL url = new URL(getResources().getString(R.string.backend_url)+"/exploits?after=2015");
            new ExploitIndexTask(this).execute(url);

        } catch (MalformedURLException e) {
            e.printStackTrace();
        }


    }




    /**
     * A native method that is implemented by the 'native-lib' native library,
     * which is packaged with this application.
     */


    public native String stringFromJNI();

    // Here is the AsyncTask class:
    //
    // AsyncTask<Params, Progress, Result>.
    //    Params – the type (Object/primitive) you pass to the AsyncTask from .execute()
    //    Progress – the type that gets passed to onProgressUpdate()
    //    Result – the type returns from doInBackground()
    // Any of them can be String, Integer, Void, etc.
    private class ExploitIndexTask extends AsyncTask<URL, Integer , List<Exploit>>{
        private final String TAG = "HTTP HANDLER";
        private Context context;
        public ExploitIndexTask(Context context) {
            this.context = context;
        }

        // Runs in UI before background thread is called
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected List<Exploit> doInBackground(URL... urls) {

            URL url = urls[0];
            List<Exploit> exploits = makeServiceCall(url);

            return exploits;
        }

        // This is called from background thread but runs in UI
        @Override
        protected void onProgressUpdate(Integer... values) {
            super.onProgressUpdate(values);
            // Do things like update the progress bar
        }

        // This runs in UI when background thread finishes
        @Override
        protected void onPostExecute(final List<Exploit> exploits) {

            RecyclerView listView = (RecyclerView) findViewById(R.id.my_recycler_view);
            HomeAdapterRecycler adapter = new HomeAdapterRecycler(this.context,exploits, new HomeAdapterRecycler.onItemClickListener(){

                @Override
                public void onItemClick(Exploit item) {
                    Intent intent = new Intent(getApplicationContext(), ExploitProfileActivity.class);
                    intent.putExtra("id", item.getId());
                    startActivity(intent);

                }
            });
            listView.setAdapter(adapter);
            listView.setLayoutManager(new LinearLayoutManager(this.context));
        }

        public List<Exploit> makeServiceCall(URL url) {
            List<Exploit> exploits = null;
            try {
                ObjectMapper mapper = new ObjectMapper();
                exploits = mapper.readValue(url, new TypeReference<List<Exploit>>(){});
            } catch (MalformedURLException e) {
                Log.e(TAG, "MalformedURLException: " + e.getMessage());
            } catch (ProtocolException e) {
                Log.e(TAG, "ProtocolException: " + e.getMessage());
            } catch (IOException e) {
                Log.e(TAG, "IOException: " + e.getMessage());
            } catch (Exception e) {
                Log.e(TAG, "Exception: " + e.getMessage());
            }
            return exploits;
        }
    }
}
