package com.blackbirdsoftware.exploitdb;
import com.blackbirdsoftware.exploitdb.R;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.support.design.widget.NavigationView;
import android.support.v4.widget.DrawerLayout;
import android.os.Bundle;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.blackbirdsoftware.exploitdb.activities.FacebookLoginActivity;
import com.blackbirdsoftware.exploitdb.model.Exploit;
import com.facebook.AccessToken;
import com.facebook.AccessTokenTracker;
import com.facebook.FacebookSdk;
import com.facebook.GraphRequest;
import com.facebook.GraphResponse;
import com.facebook.HttpMethod;
import com.facebook.Profile;
import com.facebook.login.LoginManager;
import com.facebook.login.widget.ProfilePictureView;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import net.danlew.android.joda.JodaTimeAndroid;

import org.json.JSONObject;
import org.w3c.dom.Text;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.List;
import java.util.Set;

public class MainActivity extends Activity {

//     Used to load the 'native-lib' library on application startup.
    static {
        System.loadLibrary("native-lib");
    }

    private DrawerLayout drawerLayout;
    private ListView sidebarListView;
    private RecyclerView recyclerListView;
    private Toolbar toolbar;
    NavigationView navigationView;

    private ProfilePictureView profilePictureView;
    private TextView profileNameView;

    private AccessTokenTracker mAccessTokenTracker;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        FacebookSdk.sdkInitialize(getApplicationContext());
        JodaTimeAndroid.init(this);

        setContentView(R.layout.drawer_layout);
        this.navigationView = (NavigationView)findViewById(R.id.navigation_view);
        Intent i = this.getIntent();
        View header = navigationView.getHeaderView(0);




        if(this.isLoggedIn()){


            AccessToken accessToken = AccessToken.getCurrentAccessToken();
            Profile profile = Profile.getCurrentProfile();
            String userId = accessToken.getUserId();
            String authToken = accessToken.getToken();
            Set<String> permissions = accessToken.getPermissions();
//
//
//
            this.profilePictureView = (ProfilePictureView) header.findViewById(R.id.friendProfilePicture);
            this.profilePictureView.setProfileId(userId);
            this.profilePictureView.setVisibility(View.VISIBLE);

            this.profileNameView = (TextView) header.findViewById(R.id.facebookProfileName);
            this.profileNameView.setText(profile.getName());
            this.profileNameView.setVisibility(View.VISIBLE);


        }else{
            this.profilePictureView = (ProfilePictureView) header.findViewById(R.id.friendProfilePicture);
            this.profilePictureView.setVisibility(View.INVISIBLE);
        }
//        toolbar = (Toolbar) findViewById(R.id.toolbar);
//        setSupportActionBar(toolbar);
        initNavigationDrawer();

        try {
            URL url = new URL("http://192.168.0.24:8084/exploits?after=2015");
            new ExploitIndexTask(this).execute(url);

        } catch (MalformedURLException e) {
            e.printStackTrace();
        }


    }

    public boolean isLoggedIn() {
        AccessToken accessToken = AccessToken.getCurrentAccessToken();
        return accessToken != null;
    }

    public void initNavigationDrawer() {

        this.navigationView = (NavigationView)findViewById(R.id.navigation_view);
        this.navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(MenuItem menuItem) {

                int id = menuItem.getItemId();

                switch (id){
                    case R.id.home:
                        Toast.makeText(getApplicationContext(),"Home",Toast.LENGTH_SHORT).show();
                        drawerLayout.closeDrawers();
                        break;
                    case R.id.settings:
                        Toast.makeText(getApplicationContext(),"Settings",Toast.LENGTH_SHORT).show();
                        break;
                    case R.id.login:
                        Toast.makeText(getApplicationContext(),"Login",Toast.LENGTH_SHORT).show();
                        drawerLayout.closeDrawers();
                        Intent i = new Intent(getApplicationContext(), FacebookLoginActivity.class);
                        i.putExtra("113","Some Random value!");
                        startActivity(i);
                        finish();

                        break;
                    case R.id.logout:
                        disconnectFromFacebook();
                        drawerLayout.closeDrawers();

                }
                return true;
            }
        });

        drawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);

        ActionBarDrawerToggle actionBarDrawerToggle = new ActionBarDrawerToggle(this,drawerLayout,toolbar,R.string.drawer_open,R.string.drawer_close){

            @Override
            public void onDrawerClosed(View v){
                super.onDrawerClosed(v);
            }

            @Override
            public void onDrawerOpened(View v) {
                super.onDrawerOpened(v);
            }
        };
        drawerLayout.addDrawerListener(actionBarDrawerToggle);
        actionBarDrawerToggle.syncState();
    }

    /**
     * A native method that is implemented by the 'native-lib' native library,
     * which is packaged with this application.
     */

    public void disconnectFromFacebook(){
        if (AccessToken.getCurrentAccessToken() == null) {
            return; // already logged out
        }

        new GraphRequest(AccessToken.getCurrentAccessToken(), "/me/permissions/", null, HttpMethod.DELETE, new GraphRequest
                .Callback() {
            @Override
            public void onCompleted(GraphResponse graphResponse) {

                profilePictureView = (ProfilePictureView) findViewById(R.id.friendProfilePicture);
                profilePictureView.setVisibility(View.INVISIBLE);

                profileNameView = (TextView) findViewById(R.id.facebookProfileName);
                profileNameView.setVisibility(View.INVISIBLE);
                LoginManager.getInstance().logOut();

            }
        }).executeAsync();
    }
    public native String stringFromJNI();

    // Here is the AsyncTask class:
    //
    // AsyncTask<Params, Progress, Result>.
    //    Params – the type (Object/primitive) you pass to the AsyncTask from .execute()
    //    Progress – the type that gets passed to onProgressUpdate()
    //    Result – the type returns from doInBackground()
    // Any of them can be String, Integer, Void, etc.
    private class ExploitIndexTask extends AsyncTask<URL, Integer , List<Exploit>>{
        private final String TAG = "HTTP HANDLER";
        private Context context;
        public ExploitIndexTask(Context context) {
            this.context = context;
        }

        // Runs in UI before background thread is called
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected List<Exploit> doInBackground(URL... urls) {

            URL url = urls[0];
            List<Exploit> exploits = makeServiceCall(url);

            return exploits;
        }

        // This is called from background thread but runs in UI
        @Override
        protected void onProgressUpdate(Integer... values) {
            super.onProgressUpdate(values);
            // Do things like update the progress bar
        }

        // This runs in UI when background thread finishes
        @Override
        protected void onPostExecute(final List<Exploit> exploits) {

//            runOnUiThread(new Runnable() {
//                @Override
//                public void run() {
//
//                }
//            });
            // Do things like hide the progress bar or change a TextView
            RecyclerView listView = (RecyclerView) findViewById(R.id.my_recycler_view);
            HomeAdapterRecycler adapter = new HomeAdapterRecycler(this.context,exploits);
            listView.setAdapter(adapter);
            listView.setLayoutManager(new LinearLayoutManager(this.context));
        }

        public List<Exploit> makeServiceCall(URL url) {
            List<Exploit> exploits = null;
            try {
                ObjectMapper mapper = new ObjectMapper();
                exploits = mapper.readValue(url, new TypeReference<List<Exploit>>(){});
            } catch (MalformedURLException e) {
                Log.e(TAG, "MalformedURLException: " + e.getMessage());
            } catch (ProtocolException e) {
                Log.e(TAG, "ProtocolException: " + e.getMessage());
            } catch (IOException e) {
                Log.e(TAG, "IOException: " + e.getMessage());
            } catch (Exception e) {
                Log.e(TAG, "Exception: " + e.getMessage());
            }
            return exploits;
        }
    }
}
