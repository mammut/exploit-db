package com.blackbirdsoftware.exploitdb;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.support.v4.widget.DrawerLayout;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.widget.ListView;

import com.blackbirdsoftware.exploitdb.model.Category;
import com.blackbirdsoftware.exploitdb.model.Exploit;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import net.danlew.android.joda.JodaTimeAndroid;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.List;

public class MainActivity extends Activity {

//     Used to load the 'native-lib' library on application startup.
    static {
        System.loadLibrary("native-lib");
    }

    private String [] presidents = {
            "George Washington",
            "John Adams",
            "Thomas Jefferson",
            "Andrew Jackson",
            "James Monroe",
            "John Quincy Adams",
            "Marvin Von Bauren",
            "William Henry Harrison",
            "John Tyler",
            "James K. Polk"
    };
    private DrawerLayout drawerLayout;
    private ListView sidebarListView;
    private RecyclerView recyclerListView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        JodaTimeAndroid.init(this);

        setContentView(R.layout.recycler_layout);
        //Remove title bar
//        this.requestWindowFeature(Window.FEATURE_NO_TITLE);


//        this.drawerLayout = (DrawerLayout)findViewById( R.id.drawer_layout);
//        this.sidebarListView = (ListView) findViewById(R.id.left_drawer);
//        Category categories[] = new Category[2];
//        categories[0] = new Category();
//        categories[0].setName("Category 1");
//        categories[1] = new Category();
//        categories[1].setName("Category 2");
//        this.sidebarListView.setAdapter(new SidebarAdapter(MainActivity.this,categories));
//        ListView listView = (ListView) findViewById(R.id.exploit_list_view);
//        listView.setAdapter(new HomeApadter(MainActivity.this, exploits));
//        this.sidebarListView.setAdapter(new ArrayAdapter<>(this,android.R.,presidents));


//Remove notification bar
//        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);



//         Example of a call to a native method
//        TextView tv = (TextView) findViewById(R.id.sample_text);
//        tv.setText(stringFromJNI());
//        ListView listView = (ListView) findViewById(R.id.exploit_list_view);
//        listView.setAdapter(new HomeApadter(this, presidents));

        try {
            URL url = new URL("http://192.168.0.24:8084/exploits?after=2015");
            new ExploitIndexTask(this).execute(url);

        } catch (MalformedURLException e) {
            e.printStackTrace();
        }


    }

    /**
     * A native method that is implemented by the 'native-lib' native library,
     * which is packaged with this application.
     */
    public native String stringFromJNI();

    // Here is the AsyncTask class:
    //
    // AsyncTask<Params, Progress, Result>.
    //    Params – the type (Object/primitive) you pass to the AsyncTask from .execute()
    //    Progress – the type that gets passed to onProgressUpdate()
    //    Result – the type returns from doInBackground()
    // Any of them can be String, Integer, Void, etc.
    private class ExploitIndexTask extends AsyncTask<URL, Integer , List<Exploit>>{
        private final String TAG = HttpHandler.class.getSimpleName();
        private Context context;
        public ExploitIndexTask(Context context) {
            this.context = context;
        }

        // Runs in UI before background thread is called
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected List<Exploit> doInBackground(URL... urls) {

            URL url = urls[0];
            List<Exploit> exploits = makeServiceCall(url);

            return exploits;
        }

        // This is called from background thread but runs in UI
        @Override
        protected void onProgressUpdate(Integer... values) {
            super.onProgressUpdate(values);
            // Do things like update the progress bar
        }

        // This runs in UI when background thread finishes
        @Override
        protected void onPostExecute(final List<Exploit> exploits) {

//            runOnUiThread(new Runnable() {
//                @Override
//                public void run() {
//
//                }
//            });
            // Do things like hide the progress bar or change a TextView
            RecyclerView listView = (RecyclerView) findViewById(R.id.my_recycler_view);
            HomeAdapterRecycler adapter = new HomeAdapterRecycler(this.context,exploits);
            listView.setAdapter(adapter);
            listView.setLayoutManager(new LinearLayoutManager(this.context));
        }

        public List<Exploit> makeServiceCall(URL url) {
            List<Exploit> exploits = null;
            try {
                ObjectMapper mapper = new ObjectMapper();
                exploits = mapper.readValue(url, new TypeReference<List<Exploit>>(){});
            } catch (MalformedURLException e) {
                Log.e(TAG, "MalformedURLException: " + e.getMessage());
            } catch (ProtocolException e) {
                Log.e(TAG, "ProtocolException: " + e.getMessage());
            } catch (IOException e) {
                Log.e(TAG, "IOException: " + e.getMessage());
            } catch (Exception e) {
                Log.e(TAG, "Exception: " + e.getMessage());
            }
            return exploits;
        }
    }
}
