const express  = require('express');
const app      = express();
const passport = require('passport');
const Strategy = require('passport-json').Strategy;
const User     = require('./db').User;
const helpers  = require('./helpers');

passport.use(new Strategy(
  function(username, password, cb) {
    User.findOne({ where: {username: username}})
    .then( user => {
        if ( ! user) { return cb(null, false); }
        if ( ! helpers.isValidPassword(password, user.password) ) {
            return cb(null, false);
        }
        return cb(null, user);
    }).catch(cb);
}));

passport.use('signup', new Strategy({
    passReqToCallback : true
  },
  function(req, username, password, cb) {
    User
    .findOne({ where: {username: username}})
    .then( user => {
        if (user) { throw Error('User Already Exists'); }
        return User.create({
            username: username,
            password: helpers.createHash(password)
        });
    })
    .then( user => cb(null, user) )
    .catch( err => {
        if (err && err.message){
            cb(err.message);
        } else{
            cb(err);
        }
    });
  }
));

passport.serializeUser(function(user, cb) {
  cb(null, user.id);
});

passport.deserializeUser(function(id, cb) {
  User.findById(id).then( user => {
    cb(null, user);
  }).catch(cb);
});

app.use(require('body-parser').json());
app.use(require('express-session')({
    secret: process.env.SESSION_SECRET || 'tomorrow wash basis run',
    resave: false,
    saveUninitialized: false
}));

app.use(passport.initialize());
app.use(passport.session());

const manager = express.Router();

manager.get('*', function(req, res){
    res.status(404);
    res.json({err: true, msg: "Not found"});
});

app.use('/api/v1/categories',require('../api/category/category.routes.js'));
app.use('/api/v1/exploits',require('../api/exploit/exploit.routes.js'));
app.use('/api/v1/users',require('../api/user/user.routes.js'));
app.use('/api/v1/comments',require('../api/comment/comment.routes.js'));
app.use('/', manager);

const port = process.env.SERVER_PORT || 8080;
module.exports = function startServer() {
    return new Promise( (resolve, reject) => {
        app.listen(port, () => {
            resolve();
            console.log("Open browser at: http://127.0.0.1:" + port);
        });
    });
}
