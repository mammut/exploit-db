var express = require('express');
var router  = express.Router();
var model   = require('./exploit.model.js');
var mime    = require('mime');
var path    = require('path');
var fs       = require('fs');

function parseParameters(req) {
    options = {}
    if (req.query.author != undefined) {
        options['author'] = req.query.author;
    }
    if (req.query.platform != undefined) {
        options['platform'] = req.query.platform;
    }
    if (req.query.port != undefined) {
        options['port'] = req.query.port;
    }
    if (req.query.description != undefined) {
        options['description'] = req.query.description;
    }
    if (req.query.type != undefined) {
        options['type'] = req.query.type;
    }
    if (req.query.before != undefined) {
        options['before'] = req.query.before;
    }
    if (req.query.after != undefined) {
        options['after'] = req.query.after;
    }
    if (req.query.take != undefined) {
        options['take'] = req.query.take;
    }
    if (req.query.skip != undefined) {
        options['skip'] = req.query.skip;
    }
    return options;
}

// retrieves all exploit
router.get('/', function (req, res) {
    res.setHeader('Content-Type', 'application/json');

    var options = parseParameters(req);
    model.getExploits(undefined, options, function (results){
        res.status((results.length > 0) ? 200 : 404).end(JSON.stringify(results));
    });
});

// retrieves a specific exploit
router.get('/:id', function (req, res) {
    res.setHeader('Content-Type', 'application/json');
    model.getExploits(req.params.id, undefined, function (results){
        res.status((results.length > 0) ? 200 : 404).end(JSON.stringify(results));
    });
});

// retrieves the attachment of an exploit
router.get('/:id/attachment', function (req, res) {
    model.getExploits(req.params.id, undefined, function (results){
        if (results[0] && results[0]['file']) {
            var file = __dirname + '/../../exploitdb/' + results[0]['file'];

            var filename = path.basename(file);
            var mimetype = mime.lookup(file);

            res.setHeader('Content-disposition', 'attachment; filename=' + filename);
            res.setHeader('Content-type', mimetype);

            var filestream = fs.createReadStream(file);
            filestream.pipe(res);
        } else {
            res.status(404).end();
        }
    });
});

module.exports = router;
